.TH "fi_efa" "7" "2019\-05\-07" "Libfabric Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
fi_efa \- The Amazon Elastic Fabric Adapter (EFA) Provider
.SH OVERVIEW
.PP
The EFA provider supports the Elastic Fabric Adapter (EFA) device on
Amazon EC2.
EFA provides reliable and unreliable datagram send/receive with direct
hardware access from userspace (OS bypass).
.SH SUPPORTED FEATURES
.PP
The following features are supported:
.PP
\f[I]Endpoint types\f[] : The provider supports endpoint type
\f[I]FI_EP_DGRAM\f[], and \f[I]FI_EP_RDM\f[] on a new Scalable
(unordered) Reliable Datagram protocol (SRD).
SRD provides support for reliable datagrams and more complete error
handling than typically seen with other Reliable Datagram (RD)
implementations.
The EFA provider provides segmentation, reassembly of out\-of\-order
packets to provide send\-after\-send ordering guarantees to applications
via its \f[I]FI_EP_RDM\f[] endpoint.
.PP
\f[I]RDM Endpoint capabilities\f[] : The following data transfer
interfaces are supported via the \f[I]FI_EP_RDM\f[] endpoint:
\f[I]FI_MSG\f[] and \f[I]FI_TAGGED\f[].
\f[I]FI_SEND\f[], \f[I]FI_RECV\f[], \f[I]FI_DIRECTED_RECV\f[],
\f[I]FI_MULTI_RECV\f[], and \f[I]FI_SOURCE\f[] capabilities are
supported.
The endpoint provides send\-after\-send guarantees for data operations.
The \f[I]FI_EP_RDM\f[] endpoint does not have a maximum message size.
.PP
\f[I]DGRAM Endpoint capabilities\f[] : The DGRAM endpoint only supports
\f[I]FI_MSG\f[] capability with a maximum message size of the MTU of the
underlying hardware (approximately 8 KiB).
.PP
\f[I]Address vectors\f[] : The provider supports \f[I]FI_AV_TABLE\f[]
and \f[I]FI_AV_MAP\f[] address vector types.
\f[I]FI_EVENT\f[] is unsupported.
.PP
\f[I]Completion events\f[] : The provider supports
\f[I]FI_CQ_FORMAT_CONTEXT\f[], \f[I]FI_CQ_FORMAT_MSG\f[], and
\f[I]FI_CQ_FORMAT_DATA\f[].
\f[I]FI_CQ_FORMAT_TAGGED\f[] is supported on the RDM endpoint.
Wait objects are not currently supported.
.PP
\f[I]Modes\f[] : The provider requires the use of \f[I]FI_MSG_PREFIX\f[]
when running over the DGRAM endpoint, and requires \f[I]FI_MR_LOCAL\f[]
for all memory registrations on the DGRAM endpoint.
.PP
\f[I]Memory registration modes\f[] : The RDM endpoint does not require
memory registration and the \f[I]FI_EP_DGRAM\f[] endpoint only supports
\f[I]FI_MR_LOCAL\f[].
.PP
\f[I]Progress\f[] : The RDM endpoint supports both
\f[I]FI_PROGRESS_AUTO\f[] and \f[I]FI_PROGRESS_MANUAL\f[], with the
default set to auto.
However, receive side data buffers are not modified outside of
completion processing routines.
The DGRAM endpoint only supports \f[I]FI_PROGRESS_MANUAL\f[].
.PP
\f[I]Threading\f[] : The RDM endpoint supports \f[I]FI_THREAD_SAFE\f[],
the DGRAM endpoint supports \f[I]FI_THREAD_DOMAIN\f[], i.e.
the provider is not thread safe when using the DGRAM endpoint.
.SH LIMITATIONS
.PP
The provider does not support \f[I]FI_RMA\f[], or \f[I]FI_ATOMIC\f[]
interfaces.
The DGRAM endpoint does not fully protect against resource overruns, so
resource management is disabled for this endpoint
(\f[I]FI_RM_DISABLED\f[]).
.PP
No support for selective completions.
.PP
No support for counters.
.PP
No support for inject.
.SH RUNTIME PARAMETERS
.PP
\f[I]FI_EFA_TX_SIZE\f[] : Maximum number of transmit operations before
the provider returns \-FI_EAGAIN.
For only the RDM endpoint, this parameter will cause transmit operations
to be queued when this value is set higher than the default and the
transmit queue is full.
.PP
\f[I]FI_EFA_RX_SIZE\f[] : Maximum number of receive operations before
the provider returns \-FI_EAGAIN.
.PP
\f[I]FI_EFA_TX_IOV_LIMIT\f[] : Maximum number of IOVs for a transmit
operation.
.PP
\f[I]FI_EFA_RX_IOV_LIMIT\f[] : Maximum number of IOVs for a receive
operation.
.SH RUNTIME PARAMETERS SPECIFIC TO RDM ENDPOINT
.PP
These OFI runtime parameters apply only to the RDM endpoint.
.PP
\f[I]FI_EFA_RX_WINDOW_SIZE\f[] : Maximum number of MTU\-sized messages
that can be in flight from any single endpoint as part of long message
data transfer.
.PP
\f[I]FI_EFA_TX_QUEUE_SIZE\f[] : Depth of transmit queue opened with the
NIC.
This may not be set to a value greater than what the NIC supports.
.PP
\f[I]FI_EFA_RECVWIN_SIZE\f[] : Size of out of order reorder buffer (in
messages).
Messages received out of this window will result in an error.
.PP
\f[I]FI_EFA_CQ_SIZE\f[] : Size of any cq created, in number of entries.
.PP
\f[I]FI_EFA_INLINE_MR_ENABLE\f[] : Enables inline memory registration
instead of using a bounce buffer for iov\[aq]s larger than
max_memcpy_size.
Defaults to true.
When disabled, only uses a bounce buffer.
.PP
\f[I]FI_EFA_MAX_MEMCPY_SIZE\f[] : Threshold size switch between using
memory copy into a pre\-registered bounce buffer and memory registration
on the user buffer.
.PP
\f[I]FI_EFA_MTU_SIZE\f[] : Overrides the default MTU size of the device.
.PP
\f[I]FI_EFA_RX_COPY_UNEXP\f[] : Enables the use of a separate pool of
bounce\-buffers to copy unexpected messages out of the pre\-posted
receive buffers.
.PP
\f[I]FI_EFA_RX_COPY_OOO\f[] : Enables the use of a separate pool of
bounce\-buffers to copy out\-of\-order RTS packets out of the
pre\-posted receive buffers.
.PP
\f[I]FI_EFA_MAX_TIMEOUT\f[] : Maximum timeout (us) for backoff to a peer
after a receiver not ready error.
.PP
\f[I]FI_EFA_TIMEOUT_INTERVAL\f[] : Time interval (us) for the base
timeout to use for exponential backoff to a peer after a receiver not
ready error.
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_getinfo\f[](3)
.SH AUTHORS
OpenFabrics.
